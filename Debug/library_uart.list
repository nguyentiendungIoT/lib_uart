
library_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c80  08003c80  00004c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c98  08003c98  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c98  08003c98  00004c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca0  08003ca0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca0  08003ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ca8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08003cb4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003cb4  000050b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a644  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019bd  00000000  00000000  0000f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  00011040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c7  00000000  00000000  000117d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254bd  00000000  00000000  00011d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae3f  00000000  00000000  00037254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7389  00000000  00000000  00042093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012941c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df8  00000000  00000000  00129460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0012b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003c68 	.word	0x08003c68

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003c68 	.word	0x08003c68

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b0a3      	sub	sp, #140	@ 0x8c
 80004fc:	af20      	add	r7, sp, #128	@ 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fe7a 	bl	80011f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f819 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f8af 	bl	8000668 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800050a:	f000 f87d 	bl	8000608 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t byte=0;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UART_SendByte(huart1, byte);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4c07      	ldr	r4, [pc, #28]	@ (8000534 <main+0x3c>)
 8000516:	931e      	str	r3, [sp, #120]	@ 0x78
 8000518:	4668      	mov	r0, sp
 800051a:	f104 0310 	add.w	r3, r4, #16
 800051e:	2278      	movs	r2, #120	@ 0x78
 8000520:	4619      	mov	r1, r3
 8000522:	f003 fb93 	bl	8003c4c <memcpy>
 8000526:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800052a:	f000 fd31 	bl	8000f90 <UART_SendByte>
  {
 800052e:	bf00      	nop
 8000530:	e7ef      	b.n	8000512 <main+0x1a>
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	@ 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	@ 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fb53 	bl	8003bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <SystemClock_Config+0xc8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	@ (8000600 <SystemClock_Config+0xc8>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <SystemClock_Config+0xc8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800057c:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <SystemClock_Config+0xcc>)
 800057e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <SystemClock_Config+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80005a4:	230a      	movs	r3, #10
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80005a8:	23d2      	movs	r3, #210	@ 0xd2
 80005aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f9e3 	bl	8001984 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005c4:	f000 fcde 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fc70 	bl	8001ecc <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005f2:	f000 fcc7 	bl	8000f84 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 800060e:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <MX_USART1_UART_Init+0x5c>)
 8000610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000612:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_USART1_UART_Init+0x58>)
 800064c:	f002 fa14 	bl	8002a78 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000656:	f000 fc95 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000002c 	.word	0x2000002c
 8000664:	40011000 	.word	0x40011000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b090      	sub	sp, #64	@ 0x40
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800067e:	4bad      	ldr	r3, [pc, #692]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4aac      	ldr	r2, [pc, #688]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000684:	f043 0310 	orr.w	r3, r3, #16
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4baa      	ldr	r3, [pc, #680]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0310 	and.w	r3, r3, #16
 8000692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000696:	4ba7      	ldr	r3, [pc, #668]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4aa6      	ldr	r2, [pc, #664]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800069c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4ba4      	ldr	r3, [pc, #656]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4ba1      	ldr	r3, [pc, #644]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4aa0      	ldr	r2, [pc, #640]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b9e      	ldr	r3, [pc, #632]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
 80006c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	4b9b      	ldr	r3, [pc, #620]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a9a      	ldr	r2, [pc, #616]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b98      	ldr	r3, [pc, #608]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	61fb      	str	r3, [r7, #28]
 80006dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b95      	ldr	r3, [pc, #596]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a94      	ldr	r2, [pc, #592]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b92      	ldr	r3, [pc, #584]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	61bb      	str	r3, [r7, #24]
 80006f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b8f      	ldr	r3, [pc, #572]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a8e      	ldr	r2, [pc, #568]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b8c      	ldr	r3, [pc, #560]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800070e:	4b89      	ldr	r3, [pc, #548]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a88      	ldr	r2, [pc, #544]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000714:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b86      	ldr	r3, [pc, #536]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000726:	4b83      	ldr	r3, [pc, #524]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a82      	ldr	r2, [pc, #520]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800072c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b80      	ldr	r3, [pc, #512]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800073e:	4b7d      	ldr	r3, [pc, #500]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a7c      	ldr	r2, [pc, #496]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000744:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b7a      	ldr	r3, [pc, #488]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b77      	ldr	r3, [pc, #476]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a76      	ldr	r2, [pc, #472]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b74      	ldr	r3, [pc, #464]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b71      	ldr	r3, [pc, #452]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a70      	ldr	r2, [pc, #448]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b6e      	ldr	r3, [pc, #440]	@ (8000934 <MX_GPIO_Init+0x2cc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	486b      	ldr	r0, [pc, #428]	@ (8000938 <MX_GPIO_Init+0x2d0>)
 800078c:	f001 f8e0 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000796:	4869      	ldr	r0, [pc, #420]	@ (800093c <MX_GPIO_Init+0x2d4>)
 8000798:	f001 f8da 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2108      	movs	r1, #8
 80007a0:	4867      	ldr	r0, [pc, #412]	@ (8000940 <MX_GPIO_Init+0x2d8>)
 80007a2:	f001 f8d5 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ac:	4865      	ldr	r0, [pc, #404]	@ (8000944 <MX_GPIO_Init+0x2dc>)
 80007ae:	f001 f8cf 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	21c8      	movs	r1, #200	@ 0xc8
 80007b6:	4864      	ldr	r0, [pc, #400]	@ (8000948 <MX_GPIO_Init+0x2e0>)
 80007b8:	f001 f8ca 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80007bc:	2310      	movs	r3, #16
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007cc:	230e      	movs	r3, #14
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	485d      	ldr	r0, [pc, #372]	@ (800094c <MX_GPIO_Init+0x2e4>)
 80007d8:	f000 ff0e 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007dc:	2308      	movs	r3, #8
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ec:	4619      	mov	r1, r3
 80007ee:	4857      	ldr	r0, [pc, #348]	@ (800094c <MX_GPIO_Init+0x2e4>)
 80007f0:	f000 ff02 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007f4:	2304      	movs	r3, #4
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000804:	2309      	movs	r3, #9
 8000806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800080c:	4619      	mov	r1, r3
 800080e:	484f      	ldr	r0, [pc, #316]	@ (800094c <MX_GPIO_Init+0x2e4>)
 8000810:	f000 fef2 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000814:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000826:	230b      	movs	r3, #11
 8000828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800082e:	4619      	mov	r1, r3
 8000830:	4845      	ldr	r0, [pc, #276]	@ (8000948 <MX_GPIO_Init+0x2e0>)
 8000832:	f000 fee1 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000836:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000848:	230c      	movs	r3, #12
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000850:	4619      	mov	r1, r3
 8000852:	483e      	ldr	r0, [pc, #248]	@ (800094c <MX_GPIO_Init+0x2e4>)
 8000854:	f000 fed0 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000858:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085e:	2312      	movs	r3, #18
 8000860:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086a:	2304      	movs	r3, #4
 800086c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000872:	4619      	mov	r1, r3
 8000874:	4836      	ldr	r0, [pc, #216]	@ (8000950 <MX_GPIO_Init+0x2e8>)
 8000876:	f000 febf 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800087a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800088c:	230a      	movs	r3, #10
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000894:	4619      	mov	r1, r3
 8000896:	482e      	ldr	r0, [pc, #184]	@ (8000950 <MX_GPIO_Init+0x2e8>)
 8000898:	f000 feae 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800089c:	2310      	movs	r3, #16
 800089e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008ac:	2302      	movs	r3, #2
 80008ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4826      	ldr	r0, [pc, #152]	@ (8000950 <MX_GPIO_Init+0x2e8>)
 80008b8:	f000 fe9e 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80008bc:	2380      	movs	r3, #128	@ 0x80
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80008cc:	2308      	movs	r3, #8
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d4:	4619      	mov	r1, r3
 80008d6:	4818      	ldr	r0, [pc, #96]	@ (8000938 <MX_GPIO_Init+0x2d0>)
 80008d8:	f000 fe8e 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008dc:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008ee:	230c      	movs	r3, #12
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f6:	4619      	mov	r1, r3
 80008f8:	4816      	ldr	r0, [pc, #88]	@ (8000954 <MX_GPIO_Init+0x2ec>)
 80008fa:	f000 fe7d 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80008fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000910:	2301      	movs	r3, #1
 8000912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000918:	4619      	mov	r1, r3
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <MX_GPIO_Init+0x2f0>)
 800091c:	f000 fe6c 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000920:	2360      	movs	r3, #96	@ 0x60
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000930:	230d      	movs	r3, #13
 8000932:	e013      	b.n	800095c <MX_GPIO_Init+0x2f4>
 8000934:	40023800 	.word	0x40023800
 8000938:	40020c00 	.word	0x40020c00
 800093c:	40022000 	.word	0x40022000
 8000940:	40022800 	.word	0x40022800
 8000944:	40021c00 	.word	0x40021c00
 8000948:	40021800 	.word	0x40021800
 800094c:	40021000 	.word	0x40021000
 8000950:	40020400 	.word	0x40020400
 8000954:	40020800 	.word	0x40020800
 8000958:	40020000 	.word	0x40020000
 800095c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	48bc      	ldr	r0, [pc, #752]	@ (8000c58 <MX_GPIO_Init+0x5f0>)
 8000966:	f000 fe47 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800097a:	230a      	movs	r3, #10
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000982:	4619      	mov	r1, r3
 8000984:	48b5      	ldr	r0, [pc, #724]	@ (8000c5c <MX_GPIO_Init+0x5f4>)
 8000986:	f000 fe37 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800098a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800099c:	230c      	movs	r3, #12
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a4:	4619      	mov	r1, r3
 80009a6:	48ae      	ldr	r0, [pc, #696]	@ (8000c60 <MX_GPIO_Init+0x5f8>)
 80009a8:	f000 fe26 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80009ac:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009be:	230e      	movs	r3, #14
 80009c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c6:	4619      	mov	r1, r3
 80009c8:	48a6      	ldr	r0, [pc, #664]	@ (8000c64 <MX_GPIO_Init+0x5fc>)
 80009ca:	f000 fe15 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80009ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e0:	4619      	mov	r1, r3
 80009e2:	48a0      	ldr	r0, [pc, #640]	@ (8000c64 <MX_GPIO_Init+0x5fc>)
 80009e4:	f000 fe08 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fa:	4619      	mov	r1, r3
 80009fc:	489a      	ldr	r0, [pc, #616]	@ (8000c68 <MX_GPIO_Init+0x600>)
 80009fe:	f000 fdfb 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a02:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a14:	230c      	movs	r3, #12
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4892      	ldr	r0, [pc, #584]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000a20:	f000 fdea 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000a24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a36:	230a      	movs	r3, #10
 8000a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	488a      	ldr	r0, [pc, #552]	@ (8000c6c <MX_GPIO_Init+0x604>)
 8000a42:	f000 fdd9 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000a46:	23f0      	movs	r3, #240	@ 0xf0
 8000a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a56:	230a      	movs	r3, #10
 8000a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4883      	ldr	r0, [pc, #524]	@ (8000c70 <MX_GPIO_Init+0x608>)
 8000a62:	f000 fdc9 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a66:	23f7      	movs	r3, #247	@ 0xf7
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a76:	230e      	movs	r3, #14
 8000a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	487c      	ldr	r0, [pc, #496]	@ (8000c74 <MX_GPIO_Init+0x60c>)
 8000a82:	f000 fdb9 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a98:	2309      	movs	r3, #9
 8000a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	486f      	ldr	r0, [pc, #444]	@ (8000c60 <MX_GPIO_Init+0x5f8>)
 8000aa4:	f000 fda8 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000aba:	230a      	movs	r3, #10
 8000abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4866      	ldr	r0, [pc, #408]	@ (8000c60 <MX_GPIO_Init+0x5f8>)
 8000ac6:	f000 fd97 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000aca:	2320      	movs	r3, #32
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4861      	ldr	r0, [pc, #388]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000ae2:	f000 fd89 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000af6:	230d      	movs	r3, #13
 8000af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4859      	ldr	r0, [pc, #356]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000b02:	f000 fd79 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000b06:	f241 030c 	movw	r3, #4108	@ 0x100c
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4854      	ldr	r0, [pc, #336]	@ (8000c70 <MX_GPIO_Init+0x608>)
 8000b20:	f000 fd6a 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b36:	4619      	mov	r1, r3
 8000b38:	484f      	ldr	r0, [pc, #316]	@ (8000c78 <MX_GPIO_Init+0x610>)
 8000b3a:	f000 fd5d 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000b3e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b50:	230c      	movs	r3, #12
 8000b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4848      	ldr	r0, [pc, #288]	@ (8000c7c <MX_GPIO_Init+0x614>)
 8000b5c:	f000 fd4c 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b60:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b72:	230e      	movs	r3, #14
 8000b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	483c      	ldr	r0, [pc, #240]	@ (8000c70 <MX_GPIO_Init+0x608>)
 8000b7e:	f000 fd3b 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b82:	2308      	movs	r3, #8
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b96:	4619      	mov	r1, r3
 8000b98:	4836      	ldr	r0, [pc, #216]	@ (8000c74 <MX_GPIO_Init+0x60c>)
 8000b9a:	f000 fd2d 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bb0:	230d      	movs	r3, #13
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4829      	ldr	r0, [pc, #164]	@ (8000c60 <MX_GPIO_Init+0x5f8>)
 8000bbc:	f000 fd1c 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4825      	ldr	r0, [pc, #148]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000bd4:	f000 fd10 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000be8:	230c      	movs	r3, #12
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481d      	ldr	r0, [pc, #116]	@ (8000c68 <MX_GPIO_Init+0x600>)
 8000bf4:	f000 fd00 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000bf8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481c      	ldr	r0, [pc, #112]	@ (8000c80 <MX_GPIO_Init+0x618>)
 8000c0e:	f000 fcf3 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c22:	2305      	movs	r3, #5
 8000c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4810      	ldr	r0, [pc, #64]	@ (8000c70 <MX_GPIO_Init+0x608>)
 8000c2e:	f000 fce3 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000c32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_GPIO_Init+0x618>)
 8000c4c:	f000 fcd4 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000c50:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000c54:	e016      	b.n	8000c84 <MX_GPIO_Init+0x61c>
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40020400 	.word	0x40020400
 8000c60:	40021800 	.word	0x40021800
 8000c64:	40022400 	.word	0x40022400
 8000c68:	40020c00 	.word	0x40020c00
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40022000 	.word	0x40022000
 8000c74:	40022800 	.word	0x40022800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40021400 	.word	0x40021400
 8000c80:	40021c00 	.word	0x40021c00
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c92:	230d      	movs	r3, #13
 8000c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	48a5      	ldr	r0, [pc, #660]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000c9e:	f000 fcab 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	489e      	ldr	r0, [pc, #632]	@ (8000f38 <MX_GPIO_Init+0x8d0>)
 8000cbe:	f000 fc9b 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4897      	ldr	r0, [pc, #604]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000ce0:	f000 fc8a 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	488f      	ldr	r0, [pc, #572]	@ (8000f38 <MX_GPIO_Init+0x8d0>)
 8000cfc:	f000 fc7c 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000d00:	23c0      	movs	r3, #192	@ 0xc0
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d10:	2308      	movs	r3, #8
 8000d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4889      	ldr	r0, [pc, #548]	@ (8000f40 <MX_GPIO_Init+0x8d8>)
 8000d1c:	f000 fc6c 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d20:	2310      	movs	r3, #16
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d30:	230a      	movs	r3, #10
 8000d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	487e      	ldr	r0, [pc, #504]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000d3c:	f000 fc5c 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000d40:	2328      	movs	r3, #40	@ 0x28
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d50:	230c      	movs	r3, #12
 8000d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4876      	ldr	r0, [pc, #472]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000d5c:	f000 fc4c 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000d60:	23c8      	movs	r3, #200	@ 0xc8
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d74:	4619      	mov	r1, r3
 8000d76:	4873      	ldr	r0, [pc, #460]	@ (8000f44 <MX_GPIO_Init+0x8dc>)
 8000d78:	f000 fc3e 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d7c:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d82:	2303      	movs	r3, #3
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	486d      	ldr	r0, [pc, #436]	@ (8000f48 <MX_GPIO_Init+0x8e0>)
 8000d92:	f000 fc31 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d96:	2308      	movs	r3, #8
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da6:	230c      	movs	r3, #12
 8000da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	4863      	ldr	r0, [pc, #396]	@ (8000f40 <MX_GPIO_Init+0x8d8>)
 8000db2:	f000 fc21 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000db6:	2305      	movs	r3, #5
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dce:	4619      	mov	r1, r3
 8000dd0:	485b      	ldr	r0, [pc, #364]	@ (8000f40 <MX_GPIO_Init+0x8d8>)
 8000dd2:	f000 fc11 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dd6:	2332      	movs	r3, #50	@ 0x32
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de6:	230b      	movs	r3, #11
 8000de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	4853      	ldr	r0, [pc, #332]	@ (8000f40 <MX_GPIO_Init+0x8d8>)
 8000df2:	f000 fc01 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000df6:	2304      	movs	r3, #4
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e06:	2309      	movs	r3, #9
 8000e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	484e      	ldr	r0, [pc, #312]	@ (8000f4c <MX_GPIO_Init+0x8e4>)
 8000e12:	f000 fbf1 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000e16:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e28:	2309      	movs	r3, #9
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4847      	ldr	r0, [pc, #284]	@ (8000f50 <MX_GPIO_Init+0x8e8>)
 8000e34:	f000 fbe0 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	483e      	ldr	r0, [pc, #248]	@ (8000f44 <MX_GPIO_Init+0x8dc>)
 8000e4c:	f000 fbd4 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e50:	2386      	movs	r3, #134	@ 0x86
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4834      	ldr	r0, [pc, #208]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000e6c:	f000 fbc4 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	482e      	ldr	r0, [pc, #184]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000e84:	f000 fbb8 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e88:	2350      	movs	r3, #80	@ 0x50
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e98:	230d      	movs	r3, #13
 8000e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4826      	ldr	r0, [pc, #152]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000ea4:	f000 fba8 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000ea8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eae:	2312      	movs	r3, #18
 8000eb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481b      	ldr	r0, [pc, #108]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000ec6:	f000 fb97 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000eca:	2328      	movs	r3, #40	@ 0x28
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000eda:	230a      	movs	r3, #10
 8000edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4815      	ldr	r0, [pc, #84]	@ (8000f3c <MX_GPIO_Init+0x8d4>)
 8000ee6:	f000 fb87 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000eea:	2340      	movs	r3, #64	@ 0x40
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000efa:	2309      	movs	r3, #9
 8000efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	480b      	ldr	r0, [pc, #44]	@ (8000f34 <MX_GPIO_Init+0x8cc>)
 8000f06:	f000 fb77 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f0a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f24:	4619      	mov	r1, r3
 8000f26:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <MX_GPIO_Init+0x8e4>)
 8000f28:	f000 fb66 	bl	80015f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3740      	adds	r7, #64	@ 0x40
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021c00 	.word	0x40021c00
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40021800 	.word	0x40021800
 8000f48:	40021400 	.word	0x40021400
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020c00 	.word	0x40020c00

08000f54 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_UART_TxCpltCallback+0x28>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d104      	bne.n	8000f70 <HAL_UART_TxCpltCallback+0x1c>
		a++;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_UART_TxCpltCallback+0x2c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_UART_TxCpltCallback+0x2c>)
 8000f6e:	6013      	str	r3, [r2, #0]
	}

}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	20000028 	.word	0x20000028

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <Error_Handler+0x8>

08000f90 <UART_SendByte>:
 * @brief Gửi 1 byte qua UART.
 *
 * Sử dụng hàm HAL_UART_Transmit với timeout là HAL_MAX_DELAY để đảm bảo truyền dữ liệu.
 */
void UART_SendByte(UART_HandleTypeDef *huart, uint8_t byte)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit_IT(huart,&byte, 1);
 8000f9c:	1cfb      	adds	r3, r7, #3
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f001 fdb6 	bl	8002b14 <HAL_UART_Transmit_IT>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ac      	sub	sp, #176	@ 0xb0
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	2284      	movs	r2, #132	@ 0x84
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fdea 	bl	8003bf2 <memset>
  if(huart->Instance==USART1)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a36      	ldr	r2, [pc, #216]	@ (80010fc <HAL_UART_MspInit+0x104>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d164      	bne.n	80010f2 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001028:	2340      	movs	r3, #64	@ 0x40
 800102a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800102c:	2300      	movs	r3, #0
 800102e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001030:	f107 0318 	add.w	r3, r7, #24
 8001034:	4618      	mov	r0, r3
 8001036:	f001 f92f 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001040:	f7ff ffa0 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001044:	4b2e      	ldr	r3, [pc, #184]	@ (8001100 <HAL_UART_MspInit+0x108>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001048:	4a2d      	ldr	r2, [pc, #180]	@ (8001100 <HAL_UART_MspInit+0x108>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001050:	4b2b      	ldr	r3, [pc, #172]	@ (8001100 <HAL_UART_MspInit+0x108>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	4b28      	ldr	r3, [pc, #160]	@ (8001100 <HAL_UART_MspInit+0x108>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	4a27      	ldr	r2, [pc, #156]	@ (8001100 <HAL_UART_MspInit+0x108>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	6313      	str	r3, [r2, #48]	@ 0x30
 8001068:	4b25      	ldr	r3, [pc, #148]	@ (8001100 <HAL_UART_MspInit+0x108>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <HAL_UART_MspInit+0x108>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <HAL_UART_MspInit+0x108>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <HAL_UART_MspInit+0x108>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a4:	2307      	movs	r3, #7
 80010a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4814      	ldr	r0, [pc, #80]	@ (8001104 <HAL_UART_MspInit+0x10c>)
 80010b2:	f000 faa1 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010d0:	2307      	movs	r3, #7
 80010d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010da:	4619      	mov	r1, r3
 80010dc:	480a      	ldr	r0, [pc, #40]	@ (8001108 <HAL_UART_MspInit+0x110>)
 80010de:	f000 fa8b 	bl	80015f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2025      	movs	r0, #37	@ 0x25
 80010e8:	f000 f9bd 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ec:	2025      	movs	r0, #37	@ 0x25
 80010ee:	f000 f9d6 	bl	800149e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010f2:	bf00      	nop
 80010f4:	37b0      	adds	r7, #176	@ 0xb0
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40011000 	.word	0x40011000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020400 	.word	0x40020400
 8001108:	40020000 	.word	0x40020000

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <NMI_Handler+0x4>

08001114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <UsageFault_Handler+0x4>

08001134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001162:	f000 f885 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <USART1_IRQHandler+0x10>)
 8001172:	f001 fd2d 	bl	8002bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000002c 	.word	0x2000002c

08001180 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a8:	f7ff ffea 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	@ (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f002 fd17 	bl	8003c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff f98f 	bl	80004f8 <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011e8:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 80011ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011f0:	200000b8 	.word	0x200000b8

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>

080011f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f928 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f805 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001206:	f7ff fed3 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f943 	bl	80014ba <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 f90b 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	@ (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000008 	.word	0x20000008
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	200000b4 	.word	0x200000b4

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200000b4 	.word	0x200000b4

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	05fa0000 	.word	0x05fa0000

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	@ (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	@ (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	@ (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	@ 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	@ (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff3e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	4603      	mov	r3, r0
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff31 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffa2 	bl	800140c <SysTick_Config>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff feda 	bl	8001298 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d008      	beq.n	8001504 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2280      	movs	r2, #128	@ 0x80
 80014f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e052      	b.n	80015aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0216 	bic.w	r2, r2, #22
 8001512:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001522:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	2b00      	cmp	r3, #0
 800152a:	d103      	bne.n	8001534 <HAL_DMA_Abort+0x62>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0208 	bic.w	r2, r2, #8
 8001542:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001554:	e013      	b.n	800157e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001556:	f7ff fe9f 	bl	8001298 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b05      	cmp	r3, #5
 8001562:	d90c      	bls.n	800157e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2220      	movs	r2, #32
 8001568:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e015      	b.n	80015aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e4      	bne.n	8001556 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001590:	223f      	movs	r2, #63	@ 0x3f
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d004      	beq.n	80015d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2280      	movs	r2, #128	@ 0x80
 80015ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e00c      	b.n	80015ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2205      	movs	r2, #5
 80015d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	@ 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e175      	b.n	8001904 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 8164 	bne.w	80018fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d005      	beq.n	800164e <HAL_GPIO_Init+0x56>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d130      	bne.n	80016b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 0201 	and.w	r2, r3, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d017      	beq.n	80016ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d123      	bne.n	8001740 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80be 	beq.w	80018fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b66      	ldr	r3, [pc, #408]	@ (800191c <HAL_GPIO_Init+0x324>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	4a65      	ldr	r2, [pc, #404]	@ (800191c <HAL_GPIO_Init+0x324>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178c:	6453      	str	r3, [r2, #68]	@ 0x44
 800178e:	4b63      	ldr	r3, [pc, #396]	@ (800191c <HAL_GPIO_Init+0x324>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800179a:	4a61      	ldr	r2, [pc, #388]	@ (8001920 <HAL_GPIO_Init+0x328>)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	220f      	movs	r2, #15
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a58      	ldr	r2, [pc, #352]	@ (8001924 <HAL_GPIO_Init+0x32c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d037      	beq.n	8001836 <HAL_GPIO_Init+0x23e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a57      	ldr	r2, [pc, #348]	@ (8001928 <HAL_GPIO_Init+0x330>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d031      	beq.n	8001832 <HAL_GPIO_Init+0x23a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a56      	ldr	r2, [pc, #344]	@ (800192c <HAL_GPIO_Init+0x334>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d02b      	beq.n	800182e <HAL_GPIO_Init+0x236>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a55      	ldr	r2, [pc, #340]	@ (8001930 <HAL_GPIO_Init+0x338>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d025      	beq.n	800182a <HAL_GPIO_Init+0x232>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a54      	ldr	r2, [pc, #336]	@ (8001934 <HAL_GPIO_Init+0x33c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01f      	beq.n	8001826 <HAL_GPIO_Init+0x22e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a53      	ldr	r2, [pc, #332]	@ (8001938 <HAL_GPIO_Init+0x340>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0x22a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a52      	ldr	r2, [pc, #328]	@ (800193c <HAL_GPIO_Init+0x344>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0x226>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a51      	ldr	r2, [pc, #324]	@ (8001940 <HAL_GPIO_Init+0x348>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x222>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a50      	ldr	r2, [pc, #320]	@ (8001944 <HAL_GPIO_Init+0x34c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x21e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4f      	ldr	r2, [pc, #316]	@ (8001948 <HAL_GPIO_Init+0x350>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x21a>
 800180e:	2309      	movs	r3, #9
 8001810:	e012      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001812:	230a      	movs	r3, #10
 8001814:	e010      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001816:	2308      	movs	r3, #8
 8001818:	e00e      	b.n	8001838 <HAL_GPIO_Init+0x240>
 800181a:	2307      	movs	r3, #7
 800181c:	e00c      	b.n	8001838 <HAL_GPIO_Init+0x240>
 800181e:	2306      	movs	r3, #6
 8001820:	e00a      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001822:	2305      	movs	r3, #5
 8001824:	e008      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001826:	2304      	movs	r3, #4
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x240>
 800182a:	2303      	movs	r3, #3
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x240>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x240>
 8001836:	2300      	movs	r3, #0
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	0092      	lsls	r2, r2, #2
 8001840:	4093      	lsls	r3, r2
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001848:	4935      	ldr	r1, [pc, #212]	@ (8001920 <HAL_GPIO_Init+0x328>)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <HAL_GPIO_Init+0x354>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800187a:	4a34      	ldr	r2, [pc, #208]	@ (800194c <HAL_GPIO_Init+0x354>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001880:	4b32      	ldr	r3, [pc, #200]	@ (800194c <HAL_GPIO_Init+0x354>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a4:	4a29      	ldr	r2, [pc, #164]	@ (800194c <HAL_GPIO_Init+0x354>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018aa:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_GPIO_Init+0x354>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ce:	4a1f      	ldr	r2, [pc, #124]	@ (800194c <HAL_GPIO_Init+0x354>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <HAL_GPIO_Init+0x354>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <HAL_GPIO_Init+0x354>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	2b0f      	cmp	r3, #15
 8001908:	f67f ae86 	bls.w	8001618 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40013800 	.word	0x40013800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021000 	.word	0x40021000
 8001938:	40021400 	.word	0x40021400
 800193c:	40021800 	.word	0x40021800
 8001940:	40021c00 	.word	0x40021c00
 8001944:	40022000 	.word	0x40022000
 8001948:	40022400 	.word	0x40022400
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e291      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b96      	ldr	r3, [pc, #600]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b4:	4b93      	ldr	r3, [pc, #588]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x62>
 80019c0:	4b90      	ldr	r3, [pc, #576]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x130>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e26b      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x7a>
 80019f0:	4b84      	ldr	r3, [pc, #528]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a83      	ldr	r2, [pc, #524]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd8>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x9c>
 8001a06:	4b7f      	ldr	r3, [pc, #508]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b7c      	ldr	r3, [pc, #496]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7b      	ldr	r2, [pc, #492]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xc0>
 8001a2a:	4b76      	ldr	r3, [pc, #472]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b73      	ldr	r3, [pc, #460]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a72      	ldr	r2, [pc, #456]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd8>
 8001a44:	4b6f      	ldr	r3, [pc, #444]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6e      	ldr	r2, [pc, #440]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b6c      	ldr	r3, [pc, #432]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6b      	ldr	r2, [pc, #428]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc18 	bl	8001298 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fc14 	bl	8001298 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e21f      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b61      	ldr	r3, [pc, #388]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe8>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fc04 	bl	8001298 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fc00 	bl	8001298 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	@ 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e20b      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b57      	ldr	r3, [pc, #348]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x110>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d069      	beq.n	8001b96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b4d      	ldr	r3, [pc, #308]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x190>
 8001ada:	4b4a      	ldr	r3, [pc, #296]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x17a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1df      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	493d      	ldr	r1, [pc, #244]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e040      	b.n	8001b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d023      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b39      	ldr	r3, [pc, #228]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a38      	ldr	r2, [pc, #224]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fbb6 	bl	8001298 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff fbb2 	bl	8001298 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1bd      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b30      	ldr	r3, [pc, #192]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4929      	ldr	r1, [pc, #164]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
 8001b62:	e018      	b.n	8001b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b64:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a26      	ldr	r2, [pc, #152]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fb92 	bl	8001298 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b78:	f7ff fb8e 	bl	8001298 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e199      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d038      	beq.n	8001c14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d019      	beq.n	8001bde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bae:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fb6f 	bl	8001298 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fb6b 	bl	8001298 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e176      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x23a>
 8001bdc:	e01a      	b.n	8001c14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be2:	4a08      	ldr	r2, [pc, #32]	@ (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff fb55 	bl	8001298 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff fb51 	bl	8001298 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d903      	bls.n	8001c08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e15c      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
 8001c04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b91      	ldr	r3, [pc, #580]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ee      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80a4 	beq.w	8001d6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b8b      	ldr	r3, [pc, #556]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10d      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b88      	ldr	r3, [pc, #544]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4a87      	ldr	r2, [pc, #540]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3a:	4b85      	ldr	r3, [pc, #532]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b82      	ldr	r3, [pc, #520]	@ (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c56:	4b7f      	ldr	r3, [pc, #508]	@ (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb19 	bl	8001298 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff fb15 	bl	8001298 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b64      	cmp	r3, #100	@ 0x64
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e120      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	4b75      	ldr	r3, [pc, #468]	@ (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x31a>
 8001c90:	4b6f      	ldr	r3, [pc, #444]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c94:	4a6e      	ldr	r2, [pc, #440]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c9c:	e02d      	b.n	8001cfa <HAL_RCC_OscConfig+0x376>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x33c>
 8001ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001caa:	4a69      	ldr	r2, [pc, #420]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb2:	4b67      	ldr	r3, [pc, #412]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb6:	4a66      	ldr	r2, [pc, #408]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cbe:	e01c      	b.n	8001cfa <HAL_RCC_OscConfig+0x376>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x35e>
 8001cc8:	4b61      	ldr	r3, [pc, #388]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ccc:	4a60      	ldr	r2, [pc, #384]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x376>
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cee:	4b58      	ldr	r3, [pc, #352]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	4a57      	ldr	r2, [pc, #348]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d015      	beq.n	8001d2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff fac9 	bl	8001298 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff fac5 	bl	8001298 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0ce      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	4b4b      	ldr	r3, [pc, #300]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ee      	beq.n	8001d0a <HAL_RCC_OscConfig+0x386>
 8001d2c:	e014      	b.n	8001d58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fab3 	bl	8001298 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff faaf 	bl	8001298 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	4b40      	ldr	r3, [pc, #256]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ee      	bne.n	8001d36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	4a3b      	ldr	r2, [pc, #236]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a4 	beq.w	8001ebc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d74:	4b36      	ldr	r3, [pc, #216]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d06b      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d149      	bne.n	8001e1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d88:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a30      	ldr	r2, [pc, #192]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fa80 	bl	8001298 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff fa7c 	bl	8001298 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e087      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	4313      	orrs	r3, r2
 8001de0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001de6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a18      	ldr	r2, [pc, #96]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff fa50 	bl	8001298 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff fa4c 	bl	8001298 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e057      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x478>
 8001e1a:	e04f      	b.n	8001ebc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7ff fa36 	bl	8001298 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fa32 	bl	8001298 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e03d      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4ac>
 8001e4e:	e035      	b.n	8001ebc <HAL_RCC_OscConfig+0x538>
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_RCC_OscConfig+0x544>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d028      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d121      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d11a      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d111      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0d0      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b67      	ldr	r3, [pc, #412]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	4965      	ldr	r1, [pc, #404]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b63      	ldr	r3, [pc, #396]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0b8      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f2c:	4b59      	ldr	r3, [pc, #356]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	4a58      	ldr	r2, [pc, #352]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f44:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a52      	ldr	r2, [pc, #328]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b50      	ldr	r3, [pc, #320]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	494d      	ldr	r1, [pc, #308]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d040      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	4b47      	ldr	r3, [pc, #284]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e07f      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e073      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e06b      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4936      	ldr	r1, [pc, #216]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc0:	f7ff f96a 	bl	8001298 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff f966 	bl	8001298 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e053      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2d      	ldr	r3, [pc, #180]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b27      	ldr	r3, [pc, #156]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d210      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	4922      	ldr	r1, [pc, #136]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e032      	b.n	8002086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4916      	ldr	r1, [pc, #88]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	490e      	ldr	r1, [pc, #56]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800205e:	f000 f821 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	490a      	ldr	r1, [pc, #40]	@ (8002098 <HAL_RCC_ClockConfig+0x1cc>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	fa22 f303 	lsr.w	r3, r2, r3
 8002076:	4a09      	ldr	r2, [pc, #36]	@ (800209c <HAL_RCC_ClockConfig+0x1d0>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800207a:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <HAL_RCC_ClockConfig+0x1d4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f8c6 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00
 8002094:	40023800 	.word	0x40023800
 8002098:	08003c80 	.word	0x08003c80
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a8:	b090      	sub	sp, #64	@ 0x40
 80020aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b0:	2300      	movs	r3, #0
 80020b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020bc:	4b59      	ldr	r3, [pc, #356]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d00d      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x40>
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	f200 80a1 	bhi.w	8002210 <HAL_RCC_GetSysClockFreq+0x16c>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x34>
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d003      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x3a>
 80020d6:	e09b      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b53      	ldr	r3, [pc, #332]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x184>)
 80020da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020dc:	e09b      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020de:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 80020e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020e2:	e098      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d028      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	2200      	movs	r2, #0
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	627a      	str	r2, [r7, #36]	@ 0x24
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800210c:	2100      	movs	r1, #0
 800210e:	4b47      	ldr	r3, [pc, #284]	@ (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 8002110:	fb03 f201 	mul.w	r2, r3, r1
 8002114:	2300      	movs	r3, #0
 8002116:	fb00 f303 	mul.w	r3, r0, r3
 800211a:	4413      	add	r3, r2
 800211c:	4a43      	ldr	r2, [pc, #268]	@ (800222c <HAL_RCC_GetSysClockFreq+0x188>)
 800211e:	fba0 1202 	umull	r1, r2, r0, r2
 8002122:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002124:	460a      	mov	r2, r1
 8002126:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800212a:	4413      	add	r3, r2
 800212c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800212e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002130:	2200      	movs	r2, #0
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	61fa      	str	r2, [r7, #28]
 8002136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800213e:	f7fe f863 	bl	8000208 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4613      	mov	r3, r2
 8002148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800214a:	e053      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214c:	4b35      	ldr	r3, [pc, #212]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	2200      	movs	r2, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	617a      	str	r2, [r7, #20]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800215e:	f04f 0b00 	mov.w	fp, #0
 8002162:	4652      	mov	r2, sl
 8002164:	465b      	mov	r3, fp
 8002166:	f04f 0000 	mov.w	r0, #0
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	0159      	lsls	r1, r3, #5
 8002170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002174:	0150      	lsls	r0, r2, #5
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	ebb2 080a 	subs.w	r8, r2, sl
 800217e:	eb63 090b 	sbc.w	r9, r3, fp
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800218e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002192:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002196:	ebb2 0408 	subs.w	r4, r2, r8
 800219a:	eb63 0509 	sbc.w	r5, r3, r9
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	00eb      	lsls	r3, r5, #3
 80021a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ac:	00e2      	lsls	r2, r4, #3
 80021ae:	4614      	mov	r4, r2
 80021b0:	461d      	mov	r5, r3
 80021b2:	eb14 030a 	adds.w	r3, r4, sl
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	eb45 030b 	adc.w	r3, r5, fp
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ca:	4629      	mov	r1, r5
 80021cc:	028b      	lsls	r3, r1, #10
 80021ce:	4621      	mov	r1, r4
 80021d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d4:	4621      	mov	r1, r4
 80021d6:	028a      	lsls	r2, r1, #10
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021de:	2200      	movs	r2, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	60fa      	str	r2, [r7, #12]
 80021e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e8:	f7fe f80e 	bl	8000208 <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4613      	mov	r3, r2
 80021f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002204:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x184>)
 8002212:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002218:	4618      	mov	r0, r3
 800221a:	3740      	adds	r7, #64	@ 0x40
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	00f42400 	.word	0x00f42400
 800222c:	017d7840 	.word	0x017d7840

08002230 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b03      	ldr	r3, [pc, #12]	@ (8002244 <HAL_RCC_GetHCLKFreq+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000000 	.word	0x20000000

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800224c:	f7ff fff0 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0a9b      	lsrs	r3, r3, #10
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	@ (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	08003c90 	.word	0x08003c90

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffdc 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0b5b      	lsrs	r3, r3, #13
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	08003c90 	.word	0x08003c90

08002298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d012      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022c0:	4b69      	ldr	r3, [pc, #420]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a68      	ldr	r2, [pc, #416]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022ca:	6093      	str	r3, [r2, #8]
 80022cc:	4b66      	ldr	r3, [pc, #408]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d4:	4964      	ldr	r1, [pc, #400]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d017      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002300:	4959      	ldr	r1, [pc, #356]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002310:	d101      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002312:	2301      	movs	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800231e:	2301      	movs	r3, #1
 8002320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d017      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800232e:	4b4e      	ldr	r3, [pc, #312]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002334:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	494a      	ldr	r1, [pc, #296]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800234c:	d101      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 808b 	beq.w	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b3a      	ldr	r3, [pc, #232]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	4a39      	ldr	r2, [pc, #228]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	@ 0x40
 8002388:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002394:	4b35      	ldr	r3, [pc, #212]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a34      	ldr	r2, [pc, #208]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a0:	f7fe ff7a 	bl	8001298 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7fe ff76 	bl	8001298 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e357      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ba:	4b2c      	ldr	r3, [pc, #176]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023c6:	4b28      	ldr	r3, [pc, #160]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d035      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d02e      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023e4:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002404:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002406:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800240c:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d114      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe ff3e 	bl	8001298 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	e00a      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe ff3a 	bl	8001298 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e319      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002436:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0ee      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800244a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800244e:	d111      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800245c:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800245e:	400b      	ands	r3, r1
 8002460:	4901      	ldr	r1, [pc, #4]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
 8002466:	e00b      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000
 8002470:	0ffffcff 	.word	0x0ffffcff
 8002474:	4baa      	ldr	r3, [pc, #680]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4aa9      	ldr	r2, [pc, #676]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800247a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	4ba7      	ldr	r3, [pc, #668]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002482:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248c:	49a4      	ldr	r1, [pc, #656]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800248e:	4313      	orrs	r3, r2
 8002490:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d010      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800249e:	4ba0      	ldr	r3, [pc, #640]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024a4:	4a9e      	ldr	r2, [pc, #632]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ae:	4b9c      	ldr	r3, [pc, #624]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b8:	4999      	ldr	r1, [pc, #612]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024cc:	4b94      	ldr	r3, [pc, #592]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024da:	4991      	ldr	r1, [pc, #580]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024fc:	4988      	ldr	r1, [pc, #544]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002510:	4b83      	ldr	r3, [pc, #524]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002516:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800251e:	4980      	ldr	r1, [pc, #512]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002532:	4b7b      	ldr	r3, [pc, #492]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002538:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002540:	4977      	ldr	r1, [pc, #476]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002554:	4b72      	ldr	r3, [pc, #456]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	496f      	ldr	r1, [pc, #444]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002576:	4b6a      	ldr	r3, [pc, #424]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257c:	f023 020c 	bic.w	r2, r3, #12
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002584:	4966      	ldr	r1, [pc, #408]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002598:	4b61      	ldr	r3, [pc, #388]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	495e      	ldr	r1, [pc, #376]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ba:	4b59      	ldr	r3, [pc, #356]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c8:	4955      	ldr	r1, [pc, #340]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025dc:	4b50      	ldr	r3, [pc, #320]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ea:	494d      	ldr	r1, [pc, #308]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025fe:	4b48      	ldr	r3, [pc, #288]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002604:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	4944      	ldr	r1, [pc, #272]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002620:	4b3f      	ldr	r3, [pc, #252]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002626:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	493c      	ldr	r1, [pc, #240]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002642:	4b37      	ldr	r3, [pc, #220]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002648:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002650:	4933      	ldr	r1, [pc, #204]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002664:	4b2e      	ldr	r3, [pc, #184]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002672:	492b      	ldr	r1, [pc, #172]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d011      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002686:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002694:	4922      	ldr	r1, [pc, #136]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026a4:	d101      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026c6:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d4:	4912      	ldr	r1, [pc, #72]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026f8:	4909      	ldr	r1, [pc, #36]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d006      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80d9 	beq.w	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002714:	4b02      	ldr	r3, [pc, #8]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a01      	ldr	r2, [pc, #4]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800271e:	e001      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002720:	40023800 	.word	0x40023800
 8002724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002726:	f7fe fdb7 	bl	8001298 <HAL_GetTick>
 800272a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800272e:	f7fe fdb3 	bl	8001298 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	@ 0x64
 800273a:	d901      	bls.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e194      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002740:	4b6c      	ldr	r3, [pc, #432]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d021      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11d      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002760:	4b64      	ldr	r3, [pc, #400]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002766:	0c1b      	lsrs	r3, r3, #16
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800276e:	4b61      	ldr	r3, [pc, #388]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002774:	0e1b      	lsrs	r3, r3, #24
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	019a      	lsls	r2, r3, #6
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	061b      	lsls	r3, r3, #24
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	071b      	lsls	r3, r3, #28
 8002794:	4957      	ldr	r1, [pc, #348]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d02e      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c6:	d129      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027c8:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ce:	0c1b      	lsrs	r3, r3, #16
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027d6:	4b47      	ldr	r3, [pc, #284]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027dc:	0f1b      	lsrs	r3, r3, #28
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	019a      	lsls	r2, r3, #6
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	431a      	orrs	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	071b      	lsls	r3, r3, #28
 80027fc:	493d      	ldr	r1, [pc, #244]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002804:	4b3b      	ldr	r3, [pc, #236]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800280a:	f023 021f 	bic.w	r2, r3, #31
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	3b01      	subs	r3, #1
 8002814:	4937      	ldr	r1, [pc, #220]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01d      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002828:	4b32      	ldr	r3, [pc, #200]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800282e:	0e1b      	lsrs	r3, r3, #24
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002836:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800283c:	0f1b      	lsrs	r3, r3, #28
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	019a      	lsls	r2, r3, #6
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	431a      	orrs	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	071b      	lsls	r3, r3, #28
 800285c:	4925      	ldr	r1, [pc, #148]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d011      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	019a      	lsls	r2, r3, #6
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	071b      	lsls	r3, r3, #28
 800288c:	4919      	ldr	r1, [pc, #100]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002894:	4b17      	ldr	r3, [pc, #92]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a16      	ldr	r2, [pc, #88]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800289a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800289e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a0:	f7fe fcfa 	bl	8001298 <HAL_GetTick>
 80028a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028a8:	f7fe fcf6 	bl	8001298 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	@ 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0d7      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	f040 80cd 	bne.w	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a08      	ldr	r2, [pc, #32]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028da:	f7fe fcdd 	bl	8001298 <HAL_GetTick>
 80028de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028e2:	f7fe fcd9 	bl	8001298 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	@ 0x64
 80028ee:	d903      	bls.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0ba      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80028f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002904:	d0ed      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d009      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02e      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d12a      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800292e:	4b51      	ldr	r3, [pc, #324]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800293c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	0f1b      	lsrs	r3, r3, #28
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	019a      	lsls	r2, r3, #6
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	041b      	lsls	r3, r3, #16
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	061b      	lsls	r3, r3, #24
 800295c:	431a      	orrs	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	071b      	lsls	r3, r3, #28
 8002962:	4944      	ldr	r1, [pc, #272]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800296a:	4b42      	ldr	r3, [pc, #264]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800296c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002970:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	493d      	ldr	r1, [pc, #244]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d022      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002998:	d11d      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800299a:	4b36      	ldr	r3, [pc, #216]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	0e1b      	lsrs	r3, r3, #24
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029a8:	4b32      	ldr	r3, [pc, #200]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	0f1b      	lsrs	r3, r3, #28
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	019a      	lsls	r2, r3, #6
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	061b      	lsls	r3, r3, #24
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	071b      	lsls	r3, r3, #28
 80029ce:	4929      	ldr	r1, [pc, #164]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d028      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029e2:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e8:	0e1b      	lsrs	r3, r3, #24
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029f0:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	019a      	lsls	r2, r3, #6
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	071b      	lsls	r3, r3, #28
 8002a16:	4917      	ldr	r1, [pc, #92]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a1e:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2c:	4911      	ldr	r1, [pc, #68]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a34:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0e      	ldr	r2, [pc, #56]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a40:	f7fe fc2a 	bl	8001298 <HAL_GetTick>
 8002a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a48:	f7fe fc26 	bl	8001298 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e007      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a66:	d1ef      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e040      	b.n	8002b0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe faac 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	@ 0x24
 8002aa4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fdd2 	bl	8003668 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb6b 	bl	80031a0 <UART_SetConfig>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e01b      	b.n	8002b0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fe51 	bl	80037ac <UART_CheckIdleState>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b08b      	sub	sp, #44	@ 0x2c
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d147      	bne.n	8002bba <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_UART_Transmit_IT+0x22>
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e040      	b.n	8002bbc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2221      	movs	r2, #33	@ 0x21
 8002b62:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b6c:	d107      	bne.n	8002b7e <HAL_UART_Transmit_IT+0x6a>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a13      	ldr	r2, [pc, #76]	@ (8002bc8 <HAL_UART_Transmit_IT+0xb4>)
 8002b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002b7c:	e002      	b.n	8002b84 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <HAL_UART_Transmit_IT+0xb8>)
 8002b82:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	613b      	str	r3, [r7, #16]
   return(result);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	69f9      	ldr	r1, [r7, #28]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e6      	bne.n	8002b84 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
  }
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	372c      	adds	r7, #44	@ 0x2c
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	08003adf 	.word	0x08003adf
 8002bcc:	08003a29 	.word	0x08003a29

08002bd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b0ba      	sub	sp, #232	@ 0xe8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002bfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002bfe:	4013      	ands	r3, r2
 8002c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d115      	bne.n	8002c38 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00f      	beq.n	8002c38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d009      	beq.n	8002c38 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8297 	beq.w	800315c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
      }
      return;
 8002c36:	e291      	b.n	800315c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8117 	beq.w	8002e70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002c52:	4b85      	ldr	r3, [pc, #532]	@ (8002e68 <HAL_UART_IRQHandler+0x298>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 810a 	beq.w	8002e70 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d011      	beq.n	8002c8c <HAL_UART_IRQHandler+0xbc>
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00b      	beq.n	8002c8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d011      	beq.n	8002cbc <HAL_UART_IRQHandler+0xec>
 8002c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb2:	f043 0204 	orr.w	r2, r3, #4
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d011      	beq.n	8002cec <HAL_UART_IRQHandler+0x11c>
 8002cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2204      	movs	r2, #4
 8002cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ce2:	f043 0202 	orr.w	r2, r3, #2
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d017      	beq.n	8002d28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2208      	movs	r2, #8
 8002d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d1e:	f043 0208 	orr.w	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d012      	beq.n	8002d5a <HAL_UART_IRQHandler+0x18a>
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00c      	beq.n	8002d5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 81fd 	beq.w	8003160 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da2:	2b40      	cmp	r3, #64	@ 0x40
 8002da4:	d005      	beq.n	8002db2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002daa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d04f      	beq.n	8002e52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fdbe 	bl	8003934 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc2:	2b40      	cmp	r3, #64	@ 0x40
 8002dc4:	d141      	bne.n	8002e4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3308      	adds	r3, #8
 8002dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dd4:	e853 3f00 	ldrex	r3, [r3]
 8002dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3308      	adds	r3, #8
 8002dee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002df2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002dfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1d9      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d013      	beq.n	8002e42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e1e:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <HAL_UART_IRQHandler+0x29c>)
 8002e20:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fbc3 	bl	80015b2 <HAL_DMA_Abort_IT>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d017      	beq.n	8002e62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	e00f      	b.n	8002e62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f996 	bl	8003174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e48:	e00b      	b.n	8002e62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f992 	bl	8003174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	e007      	b.n	8002e62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f98e 	bl	8003174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002e60:	e17e      	b.n	8003160 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e62:	bf00      	nop
    return;
 8002e64:	e17c      	b.n	8003160 <HAL_UART_IRQHandler+0x590>
 8002e66:	bf00      	nop
 8002e68:	04000120 	.word	0x04000120
 8002e6c:	080039fd 	.word	0x080039fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f040 814c 	bne.w	8003112 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8145 	beq.w	8003112 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 813e 	beq.w	8003112 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	f040 80b6 	bne.w	800301a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8150 	beq.w	8003164 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	f080 8148 	bcs.w	8003164 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002eda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee8:	f000 8086 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1da      	bne.n	8002eec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3308      	adds	r3, #8
 8002f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f66:	e841 2300 	strex	r3, r2, [r1]
 8002f6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1e1      	bne.n	8002f36 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3308      	adds	r3, #8
 8002f78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3308      	adds	r3, #8
 8002f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e3      	bne.n	8002f72 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fc8:	f023 0310 	bic.w	r3, r3, #16
 8002fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e4      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fa6d 	bl	80014d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800300a:	b29b      	uxth	r3, r3
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	b29b      	uxth	r3, r3
 8003010:	4619      	mov	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8b8 	bl	8003188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003018:	e0a4      	b.n	8003164 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003026:	b29b      	uxth	r3, r3
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8096 	beq.w	8003168 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800303c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8091 	beq.w	8003168 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003056:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800305a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003068:	647b      	str	r3, [r7, #68]	@ 0x44
 800306a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800306e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e4      	bne.n	8003046 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3308      	adds	r3, #8
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	623b      	str	r3, [r7, #32]
   return(result);
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3308      	adds	r3, #8
 800309c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a8:	e841 2300 	strex	r3, r2, [r1]
 80030ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e3      	bne.n	800307c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f023 0310 	bic.w	r3, r3, #16
 80030dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	617b      	str	r3, [r7, #20]
   return(result);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e4      	bne.n	80030c8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f83c 	bl	8003188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003110:	e02a      	b.n	8003168 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00e      	beq.n	800313c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800311e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01c      	beq.n	800316c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
    }
    return;
 800313a:	e017      	b.n	800316c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800313c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d012      	beq.n	800316e <HAL_UART_IRQHandler+0x59e>
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fd22 	bl	8003b9e <UART_EndTransmit_IT>
    return;
 800315a:	e008      	b.n	800316e <HAL_UART_IRQHandler+0x59e>
      return;
 800315c:	bf00      	nop
 800315e:	e006      	b.n	800316e <HAL_UART_IRQHandler+0x59e>
    return;
 8003160:	bf00      	nop
 8003162:	e004      	b.n	800316e <HAL_UART_IRQHandler+0x59e>
      return;
 8003164:	bf00      	nop
 8003166:	e002      	b.n	800316e <HAL_UART_IRQHandler+0x59e>
      return;
 8003168:	bf00      	nop
 800316a:	e000      	b.n	800316e <HAL_UART_IRQHandler+0x59e>
    return;
 800316c:	bf00      	nop
  }

}
 800316e:	37e8      	adds	r7, #232	@ 0xe8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4ba6      	ldr	r3, [pc, #664]	@ (8003464 <UART_SetConfig+0x2c4>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	6979      	ldr	r1, [r7, #20]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a94      	ldr	r2, [pc, #592]	@ (8003468 <UART_SetConfig+0x2c8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d120      	bne.n	800325e <UART_SetConfig+0xbe>
 800321c:	4b93      	ldr	r3, [pc, #588]	@ (800346c <UART_SetConfig+0x2cc>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b03      	cmp	r3, #3
 8003228:	d816      	bhi.n	8003258 <UART_SetConfig+0xb8>
 800322a:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <UART_SetConfig+0x90>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	08003241 	.word	0x08003241
 8003234:	0800324d 	.word	0x0800324d
 8003238:	08003247 	.word	0x08003247
 800323c:	08003253 	.word	0x08003253
 8003240:	2301      	movs	r3, #1
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e150      	b.n	80034e8 <UART_SetConfig+0x348>
 8003246:	2302      	movs	r3, #2
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e14d      	b.n	80034e8 <UART_SetConfig+0x348>
 800324c:	2304      	movs	r3, #4
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e14a      	b.n	80034e8 <UART_SetConfig+0x348>
 8003252:	2308      	movs	r3, #8
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e147      	b.n	80034e8 <UART_SetConfig+0x348>
 8003258:	2310      	movs	r3, #16
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e144      	b.n	80034e8 <UART_SetConfig+0x348>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a83      	ldr	r2, [pc, #524]	@ (8003470 <UART_SetConfig+0x2d0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d132      	bne.n	80032ce <UART_SetConfig+0x12e>
 8003268:	4b80      	ldr	r3, [pc, #512]	@ (800346c <UART_SetConfig+0x2cc>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d828      	bhi.n	80032c8 <UART_SetConfig+0x128>
 8003276:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <UART_SetConfig+0xdc>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080032c9 	.word	0x080032c9
 8003284:	080032c9 	.word	0x080032c9
 8003288:	080032c9 	.word	0x080032c9
 800328c:	080032bd 	.word	0x080032bd
 8003290:	080032c9 	.word	0x080032c9
 8003294:	080032c9 	.word	0x080032c9
 8003298:	080032c9 	.word	0x080032c9
 800329c:	080032b7 	.word	0x080032b7
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032c9 	.word	0x080032c9
 80032ac:	080032c3 	.word	0x080032c3
 80032b0:	2300      	movs	r3, #0
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e118      	b.n	80034e8 <UART_SetConfig+0x348>
 80032b6:	2302      	movs	r3, #2
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e115      	b.n	80034e8 <UART_SetConfig+0x348>
 80032bc:	2304      	movs	r3, #4
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e112      	b.n	80034e8 <UART_SetConfig+0x348>
 80032c2:	2308      	movs	r3, #8
 80032c4:	77fb      	strb	r3, [r7, #31]
 80032c6:	e10f      	b.n	80034e8 <UART_SetConfig+0x348>
 80032c8:	2310      	movs	r3, #16
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e10c      	b.n	80034e8 <UART_SetConfig+0x348>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a68      	ldr	r2, [pc, #416]	@ (8003474 <UART_SetConfig+0x2d4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d120      	bne.n	800331a <UART_SetConfig+0x17a>
 80032d8:	4b64      	ldr	r3, [pc, #400]	@ (800346c <UART_SetConfig+0x2cc>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032e2:	2b30      	cmp	r3, #48	@ 0x30
 80032e4:	d013      	beq.n	800330e <UART_SetConfig+0x16e>
 80032e6:	2b30      	cmp	r3, #48	@ 0x30
 80032e8:	d814      	bhi.n	8003314 <UART_SetConfig+0x174>
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d009      	beq.n	8003302 <UART_SetConfig+0x162>
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d810      	bhi.n	8003314 <UART_SetConfig+0x174>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <UART_SetConfig+0x15c>
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d006      	beq.n	8003308 <UART_SetConfig+0x168>
 80032fa:	e00b      	b.n	8003314 <UART_SetConfig+0x174>
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e0f2      	b.n	80034e8 <UART_SetConfig+0x348>
 8003302:	2302      	movs	r3, #2
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e0ef      	b.n	80034e8 <UART_SetConfig+0x348>
 8003308:	2304      	movs	r3, #4
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e0ec      	b.n	80034e8 <UART_SetConfig+0x348>
 800330e:	2308      	movs	r3, #8
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e0e9      	b.n	80034e8 <UART_SetConfig+0x348>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e0e6      	b.n	80034e8 <UART_SetConfig+0x348>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a56      	ldr	r2, [pc, #344]	@ (8003478 <UART_SetConfig+0x2d8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d120      	bne.n	8003366 <UART_SetConfig+0x1c6>
 8003324:	4b51      	ldr	r3, [pc, #324]	@ (800346c <UART_SetConfig+0x2cc>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800332e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003330:	d013      	beq.n	800335a <UART_SetConfig+0x1ba>
 8003332:	2bc0      	cmp	r3, #192	@ 0xc0
 8003334:	d814      	bhi.n	8003360 <UART_SetConfig+0x1c0>
 8003336:	2b80      	cmp	r3, #128	@ 0x80
 8003338:	d009      	beq.n	800334e <UART_SetConfig+0x1ae>
 800333a:	2b80      	cmp	r3, #128	@ 0x80
 800333c:	d810      	bhi.n	8003360 <UART_SetConfig+0x1c0>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <UART_SetConfig+0x1a8>
 8003342:	2b40      	cmp	r3, #64	@ 0x40
 8003344:	d006      	beq.n	8003354 <UART_SetConfig+0x1b4>
 8003346:	e00b      	b.n	8003360 <UART_SetConfig+0x1c0>
 8003348:	2300      	movs	r3, #0
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e0cc      	b.n	80034e8 <UART_SetConfig+0x348>
 800334e:	2302      	movs	r3, #2
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e0c9      	b.n	80034e8 <UART_SetConfig+0x348>
 8003354:	2304      	movs	r3, #4
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e0c6      	b.n	80034e8 <UART_SetConfig+0x348>
 800335a:	2308      	movs	r3, #8
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e0c3      	b.n	80034e8 <UART_SetConfig+0x348>
 8003360:	2310      	movs	r3, #16
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e0c0      	b.n	80034e8 <UART_SetConfig+0x348>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a44      	ldr	r2, [pc, #272]	@ (800347c <UART_SetConfig+0x2dc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d125      	bne.n	80033bc <UART_SetConfig+0x21c>
 8003370:	4b3e      	ldr	r3, [pc, #248]	@ (800346c <UART_SetConfig+0x2cc>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800337e:	d017      	beq.n	80033b0 <UART_SetConfig+0x210>
 8003380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003384:	d817      	bhi.n	80033b6 <UART_SetConfig+0x216>
 8003386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800338a:	d00b      	beq.n	80033a4 <UART_SetConfig+0x204>
 800338c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003390:	d811      	bhi.n	80033b6 <UART_SetConfig+0x216>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <UART_SetConfig+0x1fe>
 8003396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800339a:	d006      	beq.n	80033aa <UART_SetConfig+0x20a>
 800339c:	e00b      	b.n	80033b6 <UART_SetConfig+0x216>
 800339e:	2300      	movs	r3, #0
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e0a1      	b.n	80034e8 <UART_SetConfig+0x348>
 80033a4:	2302      	movs	r3, #2
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e09e      	b.n	80034e8 <UART_SetConfig+0x348>
 80033aa:	2304      	movs	r3, #4
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e09b      	b.n	80034e8 <UART_SetConfig+0x348>
 80033b0:	2308      	movs	r3, #8
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e098      	b.n	80034e8 <UART_SetConfig+0x348>
 80033b6:	2310      	movs	r3, #16
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e095      	b.n	80034e8 <UART_SetConfig+0x348>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003480 <UART_SetConfig+0x2e0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d125      	bne.n	8003412 <UART_SetConfig+0x272>
 80033c6:	4b29      	ldr	r3, [pc, #164]	@ (800346c <UART_SetConfig+0x2cc>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033d4:	d017      	beq.n	8003406 <UART_SetConfig+0x266>
 80033d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033da:	d817      	bhi.n	800340c <UART_SetConfig+0x26c>
 80033dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e0:	d00b      	beq.n	80033fa <UART_SetConfig+0x25a>
 80033e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e6:	d811      	bhi.n	800340c <UART_SetConfig+0x26c>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <UART_SetConfig+0x254>
 80033ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f0:	d006      	beq.n	8003400 <UART_SetConfig+0x260>
 80033f2:	e00b      	b.n	800340c <UART_SetConfig+0x26c>
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
 80033f8:	e076      	b.n	80034e8 <UART_SetConfig+0x348>
 80033fa:	2302      	movs	r3, #2
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	e073      	b.n	80034e8 <UART_SetConfig+0x348>
 8003400:	2304      	movs	r3, #4
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e070      	b.n	80034e8 <UART_SetConfig+0x348>
 8003406:	2308      	movs	r3, #8
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e06d      	b.n	80034e8 <UART_SetConfig+0x348>
 800340c:	2310      	movs	r3, #16
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e06a      	b.n	80034e8 <UART_SetConfig+0x348>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1b      	ldr	r2, [pc, #108]	@ (8003484 <UART_SetConfig+0x2e4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d138      	bne.n	800348e <UART_SetConfig+0x2ee>
 800341c:	4b13      	ldr	r3, [pc, #76]	@ (800346c <UART_SetConfig+0x2cc>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003426:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800342a:	d017      	beq.n	800345c <UART_SetConfig+0x2bc>
 800342c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003430:	d82a      	bhi.n	8003488 <UART_SetConfig+0x2e8>
 8003432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003436:	d00b      	beq.n	8003450 <UART_SetConfig+0x2b0>
 8003438:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800343c:	d824      	bhi.n	8003488 <UART_SetConfig+0x2e8>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <UART_SetConfig+0x2aa>
 8003442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003446:	d006      	beq.n	8003456 <UART_SetConfig+0x2b6>
 8003448:	e01e      	b.n	8003488 <UART_SetConfig+0x2e8>
 800344a:	2300      	movs	r3, #0
 800344c:	77fb      	strb	r3, [r7, #31]
 800344e:	e04b      	b.n	80034e8 <UART_SetConfig+0x348>
 8003450:	2302      	movs	r3, #2
 8003452:	77fb      	strb	r3, [r7, #31]
 8003454:	e048      	b.n	80034e8 <UART_SetConfig+0x348>
 8003456:	2304      	movs	r3, #4
 8003458:	77fb      	strb	r3, [r7, #31]
 800345a:	e045      	b.n	80034e8 <UART_SetConfig+0x348>
 800345c:	2308      	movs	r3, #8
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e042      	b.n	80034e8 <UART_SetConfig+0x348>
 8003462:	bf00      	nop
 8003464:	efff69f3 	.word	0xefff69f3
 8003468:	40011000 	.word	0x40011000
 800346c:	40023800 	.word	0x40023800
 8003470:	40004400 	.word	0x40004400
 8003474:	40004800 	.word	0x40004800
 8003478:	40004c00 	.word	0x40004c00
 800347c:	40005000 	.word	0x40005000
 8003480:	40011400 	.word	0x40011400
 8003484:	40007800 	.word	0x40007800
 8003488:	2310      	movs	r3, #16
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e02c      	b.n	80034e8 <UART_SetConfig+0x348>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a72      	ldr	r2, [pc, #456]	@ (800365c <UART_SetConfig+0x4bc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d125      	bne.n	80034e4 <UART_SetConfig+0x344>
 8003498:	4b71      	ldr	r3, [pc, #452]	@ (8003660 <UART_SetConfig+0x4c0>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80034a2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80034a6:	d017      	beq.n	80034d8 <UART_SetConfig+0x338>
 80034a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80034ac:	d817      	bhi.n	80034de <UART_SetConfig+0x33e>
 80034ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b2:	d00b      	beq.n	80034cc <UART_SetConfig+0x32c>
 80034b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b8:	d811      	bhi.n	80034de <UART_SetConfig+0x33e>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <UART_SetConfig+0x326>
 80034be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c2:	d006      	beq.n	80034d2 <UART_SetConfig+0x332>
 80034c4:	e00b      	b.n	80034de <UART_SetConfig+0x33e>
 80034c6:	2300      	movs	r3, #0
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e00d      	b.n	80034e8 <UART_SetConfig+0x348>
 80034cc:	2302      	movs	r3, #2
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e00a      	b.n	80034e8 <UART_SetConfig+0x348>
 80034d2:	2304      	movs	r3, #4
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	e007      	b.n	80034e8 <UART_SetConfig+0x348>
 80034d8:	2308      	movs	r3, #8
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e004      	b.n	80034e8 <UART_SetConfig+0x348>
 80034de:	2310      	movs	r3, #16
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	e001      	b.n	80034e8 <UART_SetConfig+0x348>
 80034e4:	2310      	movs	r3, #16
 80034e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034f0:	d15b      	bne.n	80035aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034f2:	7ffb      	ldrb	r3, [r7, #31]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d828      	bhi.n	800354a <UART_SetConfig+0x3aa>
 80034f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003500 <UART_SetConfig+0x360>)
 80034fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fe:	bf00      	nop
 8003500:	08003525 	.word	0x08003525
 8003504:	0800352d 	.word	0x0800352d
 8003508:	08003535 	.word	0x08003535
 800350c:	0800354b 	.word	0x0800354b
 8003510:	0800353b 	.word	0x0800353b
 8003514:	0800354b 	.word	0x0800354b
 8003518:	0800354b 	.word	0x0800354b
 800351c:	0800354b 	.word	0x0800354b
 8003520:	08003543 	.word	0x08003543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003524:	f7fe fe90 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8003528:	61b8      	str	r0, [r7, #24]
        break;
 800352a:	e013      	b.n	8003554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800352c:	f7fe fea0 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8003530:	61b8      	str	r0, [r7, #24]
        break;
 8003532:	e00f      	b.n	8003554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003534:	4b4b      	ldr	r3, [pc, #300]	@ (8003664 <UART_SetConfig+0x4c4>)
 8003536:	61bb      	str	r3, [r7, #24]
        break;
 8003538:	e00c      	b.n	8003554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353a:	f7fe fdb3 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800353e:	61b8      	str	r0, [r7, #24]
        break;
 8003540:	e008      	b.n	8003554 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003546:	61bb      	str	r3, [r7, #24]
        break;
 8003548:	e004      	b.n	8003554 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	77bb      	strb	r3, [r7, #30]
        break;
 8003552:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d074      	beq.n	8003644 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	005a      	lsls	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	441a      	add	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b0f      	cmp	r3, #15
 8003574:	d916      	bls.n	80035a4 <UART_SetConfig+0x404>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357c:	d212      	bcs.n	80035a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	b29b      	uxth	r3, r3
 8003582:	f023 030f 	bic.w	r3, r3, #15
 8003586:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	b29a      	uxth	r2, r3
 8003594:	89fb      	ldrh	r3, [r7, #14]
 8003596:	4313      	orrs	r3, r2
 8003598:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	89fa      	ldrh	r2, [r7, #14]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	e04f      	b.n	8003644 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	77bb      	strb	r3, [r7, #30]
 80035a8:	e04c      	b.n	8003644 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d828      	bhi.n	8003602 <UART_SetConfig+0x462>
 80035b0:	a201      	add	r2, pc, #4	@ (adr r2, 80035b8 <UART_SetConfig+0x418>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035dd 	.word	0x080035dd
 80035bc:	080035e5 	.word	0x080035e5
 80035c0:	080035ed 	.word	0x080035ed
 80035c4:	08003603 	.word	0x08003603
 80035c8:	080035f3 	.word	0x080035f3
 80035cc:	08003603 	.word	0x08003603
 80035d0:	08003603 	.word	0x08003603
 80035d4:	08003603 	.word	0x08003603
 80035d8:	080035fb 	.word	0x080035fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035dc:	f7fe fe34 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 80035e0:	61b8      	str	r0, [r7, #24]
        break;
 80035e2:	e013      	b.n	800360c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e4:	f7fe fe44 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 80035e8:	61b8      	str	r0, [r7, #24]
        break;
 80035ea:	e00f      	b.n	800360c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <UART_SetConfig+0x4c4>)
 80035ee:	61bb      	str	r3, [r7, #24]
        break;
 80035f0:	e00c      	b.n	800360c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f2:	f7fe fd57 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80035f6:	61b8      	str	r0, [r7, #24]
        break;
 80035f8:	e008      	b.n	800360c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fe:	61bb      	str	r3, [r7, #24]
        break;
 8003600:	e004      	b.n	800360c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	77bb      	strb	r3, [r7, #30]
        break;
 800360a:	bf00      	nop
    }

    if (pclk != 0U)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d018      	beq.n	8003644 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	085a      	lsrs	r2, r3, #1
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	441a      	add	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b0f      	cmp	r3, #15
 800362a:	d909      	bls.n	8003640 <UART_SetConfig+0x4a0>
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003632:	d205      	bcs.n	8003640 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	b29a      	uxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	e001      	b.n	8003644 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003650:	7fbb      	ldrb	r3, [r7, #30]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40007c00 	.word	0x40007c00
 8003660:	40023800 	.word	0x40023800
 8003664:	00f42400 	.word	0x00f42400

08003668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01a      	beq.n	800377e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003766:	d10a      	bne.n	800377e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	@ 0x30
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037bc:	f7fd fd6c 	bl	8001298 <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d12e      	bne.n	800382e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	2200      	movs	r2, #0
 80037da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f83b 	bl	800385a <UART_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d021      	beq.n	800382e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037fe:	623b      	str	r3, [r7, #32]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	69b9      	ldr	r1, [r7, #24]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	617b      	str	r3, [r7, #20]
   return(result);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e6      	bne.n	80037ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e011      	b.n	8003852 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3728      	adds	r7, #40	@ 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386a:	e04f      	b.n	800390c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d04b      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003874:	f7fd fd10 	bl	8001298 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	429a      	cmp	r2, r3
 8003882:	d302      	bcc.n	800388a <UART_WaitOnFlagUntilTimeout+0x30>
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e04e      	b.n	800392c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d037      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0xb2>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b80      	cmp	r3, #128	@ 0x80
 80038a0:	d034      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0xb2>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b40      	cmp	r3, #64	@ 0x40
 80038a6:	d031      	beq.n	800390c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d110      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2208      	movs	r2, #8
 80038bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f838 	bl	8003934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2208      	movs	r2, #8
 80038c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e029      	b.n	800392c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038e6:	d111      	bne.n	800390c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f81e 	bl	8003934 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e00f      	b.n	800392c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	429a      	cmp	r2, r3
 8003928:	d0a0      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b095      	sub	sp, #84	@ 0x54
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800395a:	643b      	str	r3, [r7, #64]	@ 0x40
 800395c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e6      	bne.n	800393c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	61fb      	str	r3, [r7, #28]
   return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800398e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d118      	bne.n	80039dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f023 0310 	bic.w	r3, r3, #16
 80039be:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	613b      	str	r3, [r7, #16]
   return(result);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e6      	bne.n	80039aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80039f0:	bf00      	nop
 80039f2:	3754      	adds	r7, #84	@ 0x54
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fbaa 	bl	8003174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b08f      	sub	sp, #60	@ 0x3c
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a34:	2b21      	cmp	r3, #33	@ 0x21
 8003a36:	d14c      	bne.n	8003ad2 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d132      	bne.n	8003aaa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e6      	bne.n	8003a44 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6979      	ldr	r1, [r7, #20]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e6      	bne.n	8003a76 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003aa8:	e013      	b.n	8003ad2 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aae:	781a      	ldrb	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003ad2:	bf00      	nop
 8003ad4:	373c      	adds	r7, #60	@ 0x3c
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b091      	sub	sp, #68	@ 0x44
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aea:	2b21      	cmp	r3, #33	@ 0x21
 8003aec:	d151      	bne.n	8003b92 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d132      	bne.n	8003b60 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	623b      	str	r3, [r7, #32]
   return(result);
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e6      	bne.n	8003afa <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	617b      	str	r3, [r7, #20]
   return(result);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e6      	bne.n	8003b2c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003b5e:	e018      	b.n	8003b92 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b74:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003b92:	bf00      	nop
 8003b94:	3744      	adds	r7, #68	@ 0x44
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b088      	sub	sp, #32
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6979      	ldr	r1, [r7, #20]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e6      	bne.n	8003ba6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7fd f9b5 	bl	8000f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bea:	bf00      	nop
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <memset>:
 8003bf2:	4402      	add	r2, r0
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d100      	bne.n	8003bfc <memset+0xa>
 8003bfa:	4770      	bx	lr
 8003bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8003c00:	e7f9      	b.n	8003bf6 <memset+0x4>
	...

08003c04 <__libc_init_array>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	4d0d      	ldr	r5, [pc, #52]	@ (8003c3c <__libc_init_array+0x38>)
 8003c08:	4c0d      	ldr	r4, [pc, #52]	@ (8003c40 <__libc_init_array+0x3c>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	2600      	movs	r6, #0
 8003c10:	42a6      	cmp	r6, r4
 8003c12:	d109      	bne.n	8003c28 <__libc_init_array+0x24>
 8003c14:	4d0b      	ldr	r5, [pc, #44]	@ (8003c44 <__libc_init_array+0x40>)
 8003c16:	4c0c      	ldr	r4, [pc, #48]	@ (8003c48 <__libc_init_array+0x44>)
 8003c18:	f000 f826 	bl	8003c68 <_init>
 8003c1c:	1b64      	subs	r4, r4, r5
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	2600      	movs	r6, #0
 8003c22:	42a6      	cmp	r6, r4
 8003c24:	d105      	bne.n	8003c32 <__libc_init_array+0x2e>
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2c:	4798      	blx	r3
 8003c2e:	3601      	adds	r6, #1
 8003c30:	e7ee      	b.n	8003c10 <__libc_init_array+0xc>
 8003c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c36:	4798      	blx	r3
 8003c38:	3601      	adds	r6, #1
 8003c3a:	e7f2      	b.n	8003c22 <__libc_init_array+0x1e>
 8003c3c:	08003ca0 	.word	0x08003ca0
 8003c40:	08003ca0 	.word	0x08003ca0
 8003c44:	08003ca0 	.word	0x08003ca0
 8003c48:	08003ca4 	.word	0x08003ca4

08003c4c <memcpy>:
 8003c4c:	440a      	add	r2, r1
 8003c4e:	4291      	cmp	r1, r2
 8003c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c54:	d100      	bne.n	8003c58 <memcpy+0xc>
 8003c56:	4770      	bx	lr
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c62:	4291      	cmp	r1, r2
 8003c64:	d1f9      	bne.n	8003c5a <memcpy+0xe>
 8003c66:	bd10      	pop	{r4, pc}

08003c68 <_init>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr

08003c74 <_fini>:
 8003c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c76:	bf00      	nop
 8003c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7a:	bc08      	pop	{r3}
 8003c7c:	469e      	mov	lr, r3
 8003c7e:	4770      	bx	lr
